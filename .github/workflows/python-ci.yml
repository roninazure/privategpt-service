# .github/workflows/python-ci.yml
name: Python CI

# 1) We only run on pushes or PRs into main—so no unexpected branches
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    # 2) Always use the latest Ubuntu runner
    runs-on: ubuntu-latest

    # 3) If in future you support multiple Py versions, you can extend this matrix
    strategy:
      matrix:
        python-version: [ "3.9" ]

    steps:
      # ──────────────────────────────────────────────────────────────────────────────
      # 4) Get your code
      - name: 🔄 Checkout code
        uses: actions/checkout@v3

      # 5) Install exactly the Python you want
      - name: ⚙️ Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 6) Upgrade pip, install your dependencies
      - name: 🐍 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 7) Lint your code—this fails early if style issues crop up
      - name: 🧹 Lint with flake8
        run: flake8 src/ tests/

      # 8) Run pytest, spit out a JUnit-style XML in a guaranteed folder
      - name: 🧪 Run pytest and produce JUnit report
        run: |
          mkdir -p ci_reports
          pytest --maxfail=1 --disable-warnings --junitxml=ci_reports/report.xml

      # 9) Upload that XML so you can inspect it in “Artifacts”
      - name: 📄 Upload pytest JUnit report
        if: always()        # even if tests fail, we still upload the logs
        uses: actions/upload-artifact@v4
        with:
          name: pytest-junit
          path: ci_reports/report.xml
